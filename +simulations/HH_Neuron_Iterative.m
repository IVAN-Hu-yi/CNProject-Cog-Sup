function [final_states, all_results] = HH_Neuron_Iterative(types, n_pulses, saveVarArg, currentVarArg)
% HH_Neuron_Iterative - Simulates the multistable neuron model iteratively
%   for each phasic input, using final states from one simulation as initial
%   conditions for the next.

parametres.ParametresInit; 
% Initialize storage for final states and all results
parametres.init;

final_states = repmat(initial_state, 1, n_pulses);
% Run simulations for each pulse
for pulse_num = 1:n_pulses
    fprintf('Running simulation for pulse %d/%d...\n', pulse_num, n_pulses);

    type = types{pulse_num};
    % create time vector and input current for this segment
    [T_segment, I_Vitro_segment] = util.create_protocol(...
        pulse_num, n_pulses, pre_time, pulse_duration, gap_duration, post_time, dt, I_PHASIC, type);
    
    % Run simulation for this segment
    results = util.simulate_segment(T_segment, I_Vitro_segment, initial_state, ...
        dt, C, g_L, V_L, g_Na, V_Na, g_K, V_K, g_CaL, V_CaL, g_AHP, V_AHP, ...
        a_AHP, b_AHP, g_CaT, V_CaT, g_H, V_H, V_Tau_Peak, k_Tau, tau_min, ...
        tau_diff, g_CAN, V_CAN, a_CAN, b_CAN, g_Ks, V_Ks, tau_m_Ks, ...
        Ca_0, tau_Ca, Geometric_Factor, eta_w, theta_Ca, w_min, w_max, ...
        sigma_Noise, Tau_m, Diff_Coeff, w_neg_min, eta_w_neg);
    
    % Store results
    all_results = util.store_results(all_results, results, saveVarArg);

    % Update initial state for next segment
    initial_state = struct(...
        'V',      results.V(end), ...
        'm_Na',   results.m_Na(end), ...
        'h_Na',   results.h_Na(end), ...
        'n_K',    results.n_K(end), ...
        'm_CaL',  results.m_CaL(end), ...
        'm_CaT',  results.m_CaT(end), ...
        'h_CaT',  results.h_CaT(end), ...
        'Ca',     results.Ca(end), ...
        'w',      results.w(end), ...
        'm_H',    results.m_H(end), ...
        'x_CAN',  results.x_CAN(end), ...
        'x_AHP',  results.x_AHP(end), ...
        'm_Ks',   results.m_Ks(end), ...
        'h_Ks',   results.h_Ks(end), ...
        'I_CAN',  results.I_CAN(end), ...
        'I_K',    results.I_K(end), ...
        'I_Na',   results.I_Na(end), ...
        'I_CaL',  results.I_CaL(end), ...
        'I_CaT',  results.I_CaT(end), ...
        'I_AHP',  results.I_AHP(end), ...
        'I_H',    results.I_H(end), ...
        'I_Ks',   results.I_Ks(end), ...
        'I_L',    results.I_L(end), ...
        'I_Vivo', results.I_Vivo(end) ...
    );
    
    % Store final state
    final_states(pulse_num) = initial_state;
end
end
